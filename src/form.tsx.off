

// <Text children={JSON.stringify(value,null,2)} />
// {
//   "id": "Ejc4MDUvMTExIE1lbGJvdXJuZSBTdHJlZXQsIFNvdXRoIEJyaXNiYW5lIFFMRCwgQXVzdHJhbGlhIjkaNwowEi4KFAoSCetmBkoIWpFrEbWR5sh7jemlEG8qFAoSCS8KhDUIWpFrEeHAjSBcP17dEgM4MDU",
//   "address": "805/111 Melbourne St, South Brisbane QLD 4101, Australia",
//   "location": { "lat": -27.474986899999998, "lng": 153.015932 }
// }

// import { useForm as useFormBase, FieldValues, UseFormReturn, DefaultValues } from "react-hook-form"
// import { Fragment, PropsWithChildren, ReactNode, createContext, useCallback, useContext } from "react"
// import { type AnyVariables, type DocumentInput, useMutation, useQuery, UseQueryExecute } from "urql"
// import { yupResolver } from "@hookform/resolvers/yup"
// import { zodResolver } from "@hookform/resolvers/zod"
// import { Schema } from "zod"

// export type FormContext<T extends FieldValues> = UseFormReturn<T>
// const Context = createContext<FormContext<any>|undefined>( undefined )
// export function useForm () { return useContext( Context ) }

// export type FormRenderProps<T extends FieldValues> = UseFormReturn<T> & {
//   onReset: () => void
//   onSubmit: () => void
// }

// export type FormProps<T extends FieldValues,Q> = {
//   query: DocumentInput<Q,AnyVariables>
//   mutation: DocumentInput
//   variables?: AnyVariables
//   valueAccess: (data:any) => T
//   eventAccess: (data:any) => any
//   schema?: Schema
//   types?: string[]

//   isNew?: boolean
//   defaultValue?: DefaultValues<T>
//   onError?: (error:Error) => void
//   onComplete?: (value:T, event:any, refetch: UseQueryExecute ) => void
//   render?: (value:T, props:FormRenderProps<T> ) => ReactNode
// }

// export function Form<T extends FieldValues, Q = unknown, M = unknown> ( {
//   query,
//   mutation,
//   variables,
//   valueAccess,
//   eventAccess,
//   schema,
//   types,

//   isNew,
//   onError,
//   onComplete,
//   render,
//   defaultValue = {} as DefaultValues<T>,
// }: FormProps<T,Q> ) {

//     const [ , save ] = useMutation<M>( mutation )
//     const [ { data, fetching, error }, refetch ] = useQuery<Q>( {
//       query, variables, pause: isNew,
//       requestPolicy: "network-only",
//     } )

//     const value = isNew ? defaultValue as T : !error && !fetching && data ? valueAccess( data ) : undefined
//     const resolver = schema ? zodResolver<any>( schema as any ) : undefined
//     const form = useFormBase<T>( { resolver, defaultValues: defaultValue, values: value } )
//     const watched = form.watch()

//     const onBaseSubmit = useCallback((input: T) => {
//       console.log("SUBMIT",input)
//       const validated = schema?.parse(input)//cast( input )

//       console.log("VALIDATED",validated)
//       return save({ input }, { additionalTypenames: types })
//         .then( (result:any) => {
//           const data = result.data
//           const errors = result.error ? [result.error] : result.errors || []
//           errors?.forEach( ({name = "Error", message}) => {
//             const error = new Error(message)
//             error.name = name
//             throw error
//           } )
//           onComplete?.( input, eventAccess(data), refetch )
//         } )
//         .catch( onError )
//     }, [] )

//     const onSubmit = useCallback( form.handleSubmit( onBaseSubmit, console.warn ), [] )
//     const onReset = useCallback( () => form.reset(), [] )

//     if( !value ) return <></>

//     return <Context.Provider value={ form }>
//       <form style={ { display: "flex", flexGrow: 1 } }
//       onError={ console.warn }
//       onSubmit={ event =>{
//         event.preventDefault()
//         event.stopPropagation()
//         onSubmit()
//       } } >{ render?.( watched, { ...form, onSubmit, onReset } ) }</form>
//     </Context.Provider>
// }
