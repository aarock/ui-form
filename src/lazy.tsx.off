import { ReactNode, useEffect, useState } from "react"
import { Controller, ControllerRenderProps, ControllerFieldState } from "react-hook-form"
import { type AnyVariables, type DocumentInput, useQuery } from "urql"
import { Scope, useScope } from "./scope.js"
import { useForm } from "./form.js"

export type LazyRenderProps = {
  value: ControllerRenderProps<any,any>['value']
  onBlur: ControllerRenderProps<any,any>['onBlur']
  onValueChange: ControllerRenderProps<any,any>['onChange']
}

export type LazyState = Omit<ControllerFieldState,"invalid"> & {
  isInvalid: ControllerFieldState["invalid"]
}

export type LazyProps<T,Q> = {
  query: DocumentInput<Q,AnyVariables>
  variables?: AnyVariables
  valueAccess: (data:any) => T,
  isNew?: boolean

  name?:string
  isRequired?:boolean
  render?: ( props:LazyRenderProps, state: LazyState ) => ReactNode
}

export function Lazy<T,Q=unknown>({
  isNew,
  name, isRequired, render,
  query, variables, valueAccess,
}:LazyProps<T,Q>){

  const [ { data, fetching, error } ] = useQuery<Q>( {
    query, variables, pause: isNew,
    // requestPolicy: "network-only",
  } )

  const { scope, path } = useScope()
  const form = useForm()
  const scopedName = scope(name)
  if( !form ) return <></>

  return <Controller
    name={ scopedName }
    control={form.control}
    rules={{ required: isRequired }}
    render={({ field, fieldState, formState }) =>{
      if(!isNew && fetching) return <></>
      if(!isNew && error) return <></>
      if(!isNew && !data) return <></>
      return <Scope path={ scopedName }><LazyChild
        defaultValue={ !isNew ? valueAccess(data) : field.value }
        value={field.value}
        onBlur={field.onBlur}
        onValueChange={field.onChange}
        isInvalid={fieldState.invalid}
        isDirty={fieldState.isDirty}
        isTouched={fieldState.isTouched}
        isValidating={fieldState.isValidating}
        render={render}
      /></Scope>
    }}
  />
}

export type LazyChildProps = LazyRenderProps & LazyState & {
  defaultValue: ControllerRenderProps<any,any>['value']
  render?: ( props:LazyRenderProps, state: LazyState ) => ReactNode
}

export function LazyChild({
  defaultValue,
  render,
  value,
  onBlur,
  onValueChange,
  isInvalid,
  isDirty,
  isTouched,
  isValidating,
}: LazyChildProps ){

  const [ mergedValue, setMergedValue ] = useState( null )

  useEffect(()=>{
    if( defaultValue ) onValueChange( {...defaultValue, ...value } )
    if( defaultValue ) setMergedValue( {...defaultValue, ...value } )
  },[])

  return <>{ !!mergedValue && render?.(
    { value: mergedValue, onBlur, onValueChange },
    { isInvalid, isDirty, isTouched, isValidating }
  )}</>
}
