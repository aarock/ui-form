import { Queue } from "./utils.js";
export declare const MIN_CHUNK_SIZE: number;
export declare const DEFAULT_CHUNK_SIZE: number;
export declare const DEFAULT_RETRY_COUNT = 10;
export declare const DEFAULT_RETRY_INTERVAL = 1000;
export declare const DEFAULT_VARIABLE_ACCESS: PresignedVariableAccess<any>;
export declare const DEFAULT_RESULT_ACCESS: PresignedResultAccess<any>;
export declare const DEFAULT_CHUNK_FILE: ChunkFile;
export declare const DEFAULT_CALCULATE_ETAG: CalculateETag;
export type PresignedVariableAccess<MV> = (file: File, eTags: string[]) => MV;
export type PresignedResultAccess<M> = (res: M) => PresignResult | undefined;
export type PresignFile = (file: File, eTags: string[]) => Promise<PresignResult | undefined>;
export type ChunkFile = (file: File | Blob, pos: number, len: number, end: number) => Promise<Blob>;
export type CalculateETag = (blob: Blob) => Promise<string>;
export type PresignResult = {
    key: string;
    uploadUrls: string[];
    publicUrl: string;
    privateUrl: string;
    abortUrl?: string | null;
    completeUrl?: string | null;
};
export default class Upload {
    file: File;
    presignFile: PresignFile;
    options?: UploadsOptions | undefined;
    name: string;
    size: number;
    type: string;
    id: string;
    key: string;
    keyPath: string;
    keyName: string;
    uploadUrls: string[];
    completeUrl?: string;
    abortUrl?: string;
    publicUrl: string;
    privateUrl: string;
    chunkSize: number;
    chunkFile: ChunkFile;
    calculateETag: CalculateETag;
    autoRetryCount: number;
    autoRetryIntervalMs: number;
    parts: number;
    eTags: string[];
    blobs: Blob[];
    chunks: Chunk[];
    queue: Queue<void>;
    isReady: boolean;
    isPaused: boolean;
    isComplete: boolean;
    isPending: boolean;
    isAborted: boolean;
    progress: number;
    error?: Error;
    constructor(file: File, presignFile: PresignFile, options?: UploadsOptions | undefined);
    presign: () => Promise<void>;
    send: () => Promise<void>;
    pause: () => Promise<void>;
    abort: () => Promise<void>;
    private complete;
    private progressCB?;
    onProgress: (cb?: (pct: number) => void) => void;
    private triggerProgress;
    private pauseCB?;
    onPause: (cb?: () => void) => void;
    private triggerPause;
    private resumeCB?;
    onResume: (cb?: () => void) => void;
    private triggerResume;
    private abortCB?;
    onAbort: (cb?: () => void) => void;
    private triggerAbort;
    private completeCB?;
    onComplete: (cb?: (upload: Upload) => void) => void;
    private triggerComplete;
    private errorCB?;
    onError: (cb?: (err: Error) => void) => void;
    private triggerError;
}
export type UploadsOptions = {
    calculateETag?: CalculateETag;
    chunkFile?: ChunkFile;
    chunkSize?: number;
    autoRetryCount?: number;
    autoRetryIntervalMs?: number;
    maxConcurrentUploads?: number;
    onError?: (err?: Error) => void;
    onComplete?: (upload: Upload) => void;
};
export declare class Chunk {
    uploadUrl: string;
    blob: Blob;
    private autoRetryCount;
    private autoRetryIntervalMs;
    isAborted: boolean;
    isComplete: boolean;
    isPending: boolean;
    constructor(uploadUrl: string, blob: Blob, autoRetryCount?: number, autoRetryIntervalMs?: number);
    send(): Promise<void>;
    abort(): void;
}
//# sourceMappingURL=upload.class.d.ts.map